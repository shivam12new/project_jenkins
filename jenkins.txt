Jenkins â€” Interview Questions & Answers
1. What is Jenkins and why is it used in DevOps?
Answer:
Jenkins is an open-source automation server used for continuous integration and continuous delivery (CI/CD). It automates tasks like building, testing, and deploying applications, helping to improve development speed and consistency.

2. What are the differences between Freestyle and Pipeline jobs in Jenkins?
Answer:

Freestyle: GUI-based configuration; limited customization.

Pipeline: Defined in code (Jenkinsfile); supports complex workflows, version control, and shared libraries.

3. What is a Jenkinsfile? Provide a basic example.
Answer:
A Jenkinsfile is a script that defines the CI/CD pipeline in Groovy.

Example:

groovy
Copy
Edit
pipeline {
  agent any
  stages {
    stage('Build') {
      steps {
        sh 'mvn clean install'
      }
    }
    stage('Test') {
      steps {
        sh 'mvn test'
      }
    }
  }
}
4. How do you secure sensitive credentials in Jenkins?
Answer:
Use the Credentials Plugin to store secrets securely and inject them into jobs via environment variables or credential bindings.

5. What is a Jenkins Agent and how does it work?
Answer:
An agent (or node) is a machine that runs Jenkins jobs. The master schedules jobs and sends them to agents based on labels and job configuration.

6. What is a Shared Library in Jenkins?
Answer:
Shared libraries allow you to reuse code across multiple pipelines by defining common steps, stages, or functions in external Groovy scripts.

7. How do you trigger a Jenkins job automatically?
Answer:

On SCM change (e.g., Git webhook)

On a schedule (CRON syntax)

After another job (upstream/downstream)

Using build command in pipeline or external script

8. What are post actions in Jenkins pipeline?
Answer:
post actions run after pipeline execution and are used for clean-up, notifications, or failure handling.

Example:

groovy
Copy
Edit
post {
  always {
    echo 'This always runs.'
  }
  failure {
    mail to: 'dev@company.com', subject: 'Build failed'
  }
}
9. How can you pass parameters to a Jenkins pipeline?
Answer:
Use the parameters block at the top of a Jenkinsfile.

Example:

groovy
Copy
Edit
pipeline {
  agent any
  parameters {
    string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: params.BRANCH, url: 'https://github.com/repo.git'
      }
    }
  }
}
10. How do you integrate Jenkins with Docker or Kubernetes?
Answer:

Use Docker agent in pipeline: agent { docker { image 'node:14' } }

Use Kubernetes Plugin to run dynamic pods as Jenkins agents

Integrate Helm for deploying apps to Kubernetes from Jenkins

11. How do you handle parallel execution in Jenkins pipelines?
Answer:

groovy
Copy
Edit
stage('Tests') {
  parallel {
    stage('Unit') {
      steps { sh 'npm run unit' }
    }
    stage('Integration') {
      steps { sh 'npm run integration' }
    }
  }
}
12. How do you handle pipeline failures and implement retry logic?
Answer:
Use retry block to retry a stage/step on failure.

groovy
Copy
Edit
stage('Flaky Test') {
  steps {
    retry(3) {
      sh './run-flaky-tests.sh'
    }
  }
}